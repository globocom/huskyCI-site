(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{161:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return b}));var i=n(2),a=n(9),o=(n(0),n(171)),r={id:"handling-false-positives",title:"Handling false positives"},l={id:"guides/handling-false-positives",title:"Handling false positives",description:"Handling False Positives",source:"@site/docs/guides/handling-false-positives.md",permalink:"/docs/guides/handling-false-positives",sidebar:"docs",previous:{title:"Integrating with SonarQube",permalink:"/docs/guides/integrating-with-sonar"},next:{title:"Accessing interal repositories",permalink:"/docs/guides/accessing-internal-repositories"}},s=[{value:"Handling False Positives",id:"handling-false-positives",children:[]},{value:".huskyci",id:"huskyci",children:[]},{value:"False positives generated by NPM Audit or Yarn Audit",id:"false-positives-generated-by-npm-audit-or-yarn-audit",children:[{value:"How to use it?",id:"how-to-use-it",children:[]}]},{value:"False positives generated by GitLeaks",id:"false-positives-generated-by-gitleaks",children:[{value:".gitleaks.toml",id:"gitleakstoml",children:[]},{value:"Files",id:"files",children:[]},{value:"Commits",id:"commits",children:[]},{value:"Example",id:"example",children:[]}]}],c={rightToc:s};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"handling-false-positives"},"Handling False Positives"),Object(o.b)("p",null,"Vulnerabilities may fail your CI pipeline even if you consider them as false positives. This section will guide you to overcome this situation when handling issues."),Object(o.b)("h2",{id:"huskyci"},".huskyci"),Object(o.b)("p",null,"A file named ",Object(o.b)("inlineCode",{parentName:"p"},".huskyci")," can be placed on your project's root directory to be read and have it's contents ignored by a huskyCI analysis. To create this file, you can follow the example below:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-sh"}),"[huskyCI-Ignore]\n\n# Bandit ignore:\ntests/\n\n# Safety ignore:\nvendor/\n\n# Gosec ignore:\napi/server.go\n")),Object(o.b)("p",null,"A ",Object(o.b)("inlineCode",{parentName:"p"},".huskyci")," file must have a ",Object(o.b)("inlineCode",{parentName:"p"},"[huskyCI-Ignore]")," header, so it can be recognized by huskyCI, after that, all folders or files will be removed from future analyses. It's important to notice that the file path is relative to the project's root directory and adding comments in between entries serves only as a way of better organizing."),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Note:")," Not all security tests currently support this feature, for more information on which are supported, please visit this ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/globocom/huskyCI/issues/461"}),"GitHub issue"),":"),Object(o.b)("h2",{id:"false-positives-generated-by-npm-audit-or-yarn-audit"},"False positives generated by NPM Audit or Yarn Audit"),Object(o.b)("p",null,"When running ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://docs.npmjs.com/cli/audit"}),"npm audit")," or ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://classic.yarnpkg.com/en/docs/cli/audit/"}),"yarn audit"),", even though being told explicitly by huskyCI not to include sub-dependencies, some might appear in the final output. In order to overcome this issue, it is possible to modify your project's ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," file to define version overrides."),Object(o.b)("h3",{id:"how-to-use-it"},"How to use it?"),Object(o.b)("p",null,"Add a ",Object(o.b)("inlineCode",{parentName:"p"},"resolutions")," field to your ",Object(o.b)("inlineCode",{parentName:"p"},"package.json")," file and define your version overrides, as shown by the image below:"),Object(o.b)("p",{align:"center"},Object(o.b)("img",{src:"/img/package_lock_resolutions.png"})),Object(o.b)("p",null,"It's important to notice that if you define an invalid ",Object(o.b)("inlineCode",{parentName:"p"},"resolution"),", such as invalid package name or invalid version range, you will receive a warning. More on selective version resolutions ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://classic.yarnpkg.com/en/docs/selective-version-resolutions/"}),"here"),"."),Object(o.b)("p",null,"If you're using Yarn, run ",Object(o.b)("inlineCode",{parentName:"p"},"yarn install"),"."),Object(o.b)("p",null,"For NPM, first run ",Object(o.b)("inlineCode",{parentName:"p"},"npx npm-force-resolutions")," followed by ",Object(o.b)("inlineCode",{parentName:"p"},"npm install"),"."),Object(o.b)("p",null,"After installing, running ",Object(o.b)("inlineCode",{parentName:"p"},"npm audit")," or ",Object(o.b)("inlineCode",{parentName:"p"},"yarn audit")," should no longer generate an entry for the dependency version provided."),Object(o.b)("h2",{id:"false-positives-generated-by-gitleaks"},"False positives generated by GitLeaks"),Object(o.b)("h3",{id:"gitleakstoml"},".gitleaks.toml"),Object(o.b)("p",null,"As huskyCI uses ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/zricethezav/gitleaks"}),Object(o.b)("inlineCode",{parentName:"a"},"gitleaks"))," to audit git repositories for secrets, a ",Object(o.b)("inlineCode",{parentName:"p"},".gitleaks.toml")," file can be used to add an allow list when needed. To do that, simply add this file into the root of your repository, as the following example:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-yml"}),'title = "huskyCI gitleaks config"\n[whitelist]\nfiles = [\n    "(.*?)(jpg|gif|doc|pdf|bin)$",\n    "^vendor/(.*?)$",\n    ".gitleaks.toml",\n]\ncommits = [\n    "444f28d5437ad3127702bf1b0779ae6cd00ab146",\n]\n')),Object(o.b)("h3",{id:"files"},"Files"),Object(o.b)("p",null,"The following examples can be used to include files into the allow list using regex, as follows:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-yml"}),'files = [\n    "(.*?)(jpg|gif|doc|pdf|bin)$",\n    "^vendor/(.*?)$",\n    ".gitleaks.toml",\n]\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"(.*?)(jpg|gif|doc|pdf|bin)$")," will not consider any file that has these specific extensions."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"^vendor/(.*?)$")," will not consider any file inside the ",Object(o.b)("inlineCode",{parentName:"li"},"vendor/")," folder."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},".gitleaks.toml")," will not consider this particular file into the scan.")),Object(o.b)("h3",{id:"commits"},"Commits"),Object(o.b)("p",null,"The following example can used to include a particular commit into the allow list, as follows:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-yml"}),'commits = [\n    "444f28d5437ad3127702bf1b0779ae6cd00ab146",\n]\n')),Object(o.b)("h3",{id:"example"},"Example"),Object(o.b)("p",null,"Imagine that you have a ",Object(o.b)("inlineCode",{parentName:"p"},"connect.go")," file in your git repository with the commit hash ",Object(o.b)("inlineCode",{parentName:"p"},"444f28d5437ad3127702bf1b0779ae6cd00ab146"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-go"}),'func ConnectDB() error {\n\n    username := "root"\n    password := "*hb123:0l"\n    host := "http://myinternal.url.to.host"\n    port := "3360"\n\n    err := mongoConnect(username, password, host, port)\n\n    return err\n}\n')),Object(o.b)("p",null,"After mitigating the vulnerability by invalidating the password, using a new one, and adding environment variables logic, your new code can look like this:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-go"}),'func ConnectDB() error {\n\n    username :=  os.Getenv("DB_USER")\n    password := os.Getenv("DB_PASSWORD")\n    host := os.Getenv("DB_HOST")\n    port := os.Getenv("DB_PORT")\n\n    err := mongoConnect(username, password, host, port)\n\n    return err\n')),Object(o.b)("p",null,"When running huskyCI again, you may realize that ",Object(o.b)("a",Object(i.a)({parentName:"p"},{href:"https://github.com/zricethezav/gitleaks"}),Object(o.b)("inlineCode",{parentName:"a"},"gitleaks"))," will still fail your CI, because the old commit ",Object(o.b)("inlineCode",{parentName:"p"},"444f28d5437ad3127702bf1b0779ae6cd00ab146")," stills has credentials in it. "),Object(o.b)("p",null,"The point is: you should ",Object(o.b)("strong",{parentName:"p"},"NOT")," whitelist the ",Object(o.b)("inlineCode",{parentName:"p"},"connect.go")," file into  ",Object(o.b)("inlineCode",{parentName:"p"},".gitleaks.toml"),"! By doing that, any new hardcoded passwords in this file will not be checked anymore. The correct way is to add the commit itself:"),Object(o.b)("pre",null,Object(o.b)("code",Object(i.a)({parentName:"pre"},{className:"language-yml"}),'title = "huskyCI gitleaks config"\n[whitelist]\ncommit = [\n    "444f28d5437ad3127702bf1b0779ae6cd00ab146",\n]\n')))}b.isMDXComponent=!0},171:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var i=n(0),a=n.n(i);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),b=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=b(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,r=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=b(n),u=i,m=p["".concat(r,".").concat(u)]||p[u]||d[u]||o;return n?a.a.createElement(m,l(l({ref:t},c),{},{components:n})):a.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.a.createElement.apply(null,r)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);